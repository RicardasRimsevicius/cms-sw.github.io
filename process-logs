#!/usr/bin/env python

# Generate a makefile to import all our AFS logs into the cms-sw.github.io
# repository so that we can happily serve them from there.
from __future__ import print_function
from glob import glob
from argparse import ArgumentParser
from os.path import join, exists, basename
from collections import defaultdict
from commands import getstatusoutput
import json
import re

RESULTS_PATH = "pyRelValMatrixLogs/run/runall-report-step123-.log"
UNITTEST_SUMMARY_PATH = "unitTests-summary.log"
RELVAL_LOGS = "pyRelValMatrixLogs.zip"
ES_HOSTNAME="cmskibana.cern.ch"
ES_INDEX="ib-matrix*"

#
# Queries elasticsearch to get the current list of avaiable ib results
#
def get_list_avaiable_ib_results( es_hostname, es_index ):
  query_file = 'es-queries/list-available-ib-results.json'
  cmd = "curl -s -XPOST http://{hostname}/{index}/_search -d@{path}".format(
         hostname=es_hostname,
         index=es_index,
         path=query_file )

  err, out = getstatusoutput(cmd)
  if err:
    print( "Error while getting the list of releases from elasticsearch" )
    print( out )
    exit(0)

  response = json.loads( out )
  if not response.get( 'aggregations' ):
    print( "It seems that there is no information about the IBs in elasticsearch.\n" \
           "I can continue, but this should be checked" )
    return []

  ibs = [ x[ 'key' ] for x in response[ 'aggregations' ][ 'IBs' ][ 'buckets' ] ]
  return ibs



if __name__ == "__main__":
  parser = ArgumentParser()
  parser.add_argument("--logdir", type=str, help="where to find the logs", required=True)
  parser.add_argument("--filter", type=str, default="")
  parser.add_argument("-n", "--dry-run", dest="dryRun", action="store_true", default=False)
  args = parser.parse_args()

  release_match = join(args.logdir, "([^/]*)/www/([^/]*)/([^/]*)/([^/]*)/pyRelValMatrixLogs/run/runall-report-step123-.log")

  # Generate a tuple with
  # (<release-name>, <release-queue>, <release-path>)
  globExpr = join(args.logdir, "*/www/*/*/*")
  releases = [r for r in glob(globExpr) if re.match(".*" + args.filter + ".*", r)]
  inputs = [join(r, RESULTS_PATH) for r in releases if exists(join(r, RESULTS_PATH))]
  inputsUnitTestSummary = [join(r, UNITTEST_SUMMARY_PATH) for r in releases if exists(join(r, UNITTEST_SUMMARY_PATH))]
  inputsRelvalLogs = [join(r, RELVAL_LOGS) for r in releases if exists(join(r, RELVAL_LOGS))]

  outputs = [re.match(release_match, r) for r in inputs]
  releases = [x.group(4) for x in outputs]
  dates = [re.match(".*(2[0-9]*-[01][0-9]-[0-3][0-9]-[0-9]*)$", x).group(1) for x in releases]
  queues = [re.match("(.*)_2[0-9]*-[01][0-9]-[0-3][0-9]-[0-9]*$", x).group(1) for x in releases]
  architectures = [m.group(1) for m in outputs]
  
  zip(architectures, dates, queues)
  outputs = [join("data/relvals/", x[0], x[1], x[2] + ".json")
             for x in zip(architectures, dates, queues)]
  outputsUnitTestSummary = [join("data/unitTests/", x[0], x[1], x[2] + ".json")
             for x in zip(architectures, dates, queues)]
  outputsRelvalCommands = [join("data/commands/", x[0], x[1], x[2] + ".json")
             for x in zip(architectures, dates, queues)]
  outputsRelvalMsgs = [join("data/messages/", x[0], x[1], x[2] + ".json")
             for x in zip(architectures, dates, queues)]
  outputsJobReports = [join("data/jobreports", x[0], x[2], x[1] + ".csv")
             for x in zip(architectures, dates, queues)]
  outputsInputFiles = [join("data/inputs", x[0], x[2], x[1] + ".csv")
             for x in zip(architectures, dates, queues)]
  pairs = zip(outputs, inputs)
  pairsUnitTestsSummary = zip(outputsUnitTestSummary, inputsUnitTestSummary)
  pairsCommands = zip(outputsRelvalCommands, inputsRelvalLogs)
  pairsMessages = zip(outputsRelvalMsgs, inputsRelvalLogs)
  pairsJobReports = zip(outputsJobReports, inputsRelvalLogs)
  pairsInputFiles = zip(outputsInputFiles, inputsRelvalLogs)

  #Incomplete results
  available_ibs_es = get_list_avaiable_ib_results( ES_HOSTNAME, ES_INDEX )
  all_relvals_afs = [x.split('/')[ 10 ] for x in inputsRelvalLogs ]

  incomplete_ibs = list( set( available_ibs_es ) - set( all_relvals_afs ) )
  print( 'All IBS with results in ES:' )
  print( available_ibs_es )
  print( 'Incomplete results ( not in AFS ):' )
  print( incomplete_ibs )

  f = open("Makefile", "w")

  # A rule which takes care of converting a few known files in CMSDIST to json.

  allFiles = outputs + outputsUnitTestSummary + outputsRelvalCommands + outputsJobReports + outputsInputFiles
  print(".PHONY: all clean pr-stats", file=f)
  print("all: pr-stats ib-files data/cmsdist-config.json "+" ".join( ["incomplete_relvals_"+x for x in incomplete_ibs] )+" "
         +" ".join( ["relvals_exceptions_"+x for x in available_ibs_es] )+" " +" ".join(allFiles), file=f)
  print("data/cmsdist-config.json:\n\tmkdir -p `dirname $@` && ./process-cmsdist > $@", file=f)
  print("pr-stats:\n\tmkdir -p data/stats && ./process-pr-stats && cat data/stats/prs/*.csv | sort -u -r > data/stats/pr-stats.csv", file=f)
  print("ib-files:\n\tmkdir -p data/inputs && cat data/inputs/*/*/*.csv | sort -u -r > data/inputs/all-ibs.csv", file=f)
  print("clean:\n\trm -rf data/relvals", file=f)
  print("", file=f)
  for x in pairs:
    l = "%s: %s\n\tmkdir -p `dirname $@` && ./process-run123-logs $< > $@" % x
    print(l, file=f)
  for x in pairsUnitTestsSummary:
    l = "%s: %s\n\tmkdir -p `dirname $@` && ./process-unitTestSummary-logs $< > $@" % x
    print(l, file=f)
  for x in pairsCommands:
    l = "%s: %s\n\tmkdir -p `dirname $@` && ./process-step-commands $< data/commands/objs > $@" % x
    print(l, file=f)
  for x in pairsMessages:
    l = "%s: %s\n\tmkdir -p `dirname $@` && ./process-logs-messages $< data/messages/objs > $@" % x
    print(l, file=f)
  for x in pairsJobReports:
    l = "%s: %s\n\tmkdir -p `dirname $@` && ./process-job-reports $< > $@" % x
    print(l, file=f)
  for x in pairsInputFiles:
    l = "%s: %s\n\tmkdir -p `dirname $@` && ./log-input-files $< | sort > $@" % x
    print(l, file=f)
  for x in incomplete_ibs:
    l = "incomplete_relvals_%s:\n\t./process-relvals-status-es %s" % (x,x)
    print(l, file=f)
  for x in available_ibs_es:
    l = "relvals_exceptions_%s:\n\t./process-relvals-exceptions-es %s" % (x,x)
    print(l, file=f)
